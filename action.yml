name: 'Composer install action'
description: 'Composer install with cache'

inputs:
  composer_install_options:
    required: false
    default: '--prefer-dist --no-interaction --ignore-platform-req=ext-soap --ignore-platform-req=ext-bcmath --ignore-platform-req=ext-gd'
    description: "Options that will be added to the composer install command"

  cache_prefix:
    required: false
    default: 'composer-vendor'
    description: Cache key prefix, useful for cache versioning.

  zstd_compression_level:
    required: false
    default: 1
    description: zstd compression level (1-19, 1=fastest, 19=best compression)

outputs:
  cache_key:
    description: 'The cache key used for caching.'
    value: ${{ steps.cache-restore.outputs.cache-primary-key || steps.cache-restore.outputs.cache-matched-key }}
  cache_hit:
    description: 'Whether the cache was hit or not.'
    value: ${{ steps.cache-restore.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Check for zstd installation
      shell: bash
      run: |
        if ! command -v zstd &> /dev/null; then
          echo "ERROR: zstd is not installed or not in PATH."
          echo "Please install zstd on your runner:"
          echo "  Ubuntu/Debian: apt-get install zstd"
          echo "  CentOS/RHEL: yum install zstd"
          echo "  macOS: brew install zstd"
          exit 1
        fi
        echo "zstd is available: $(zstd --version)"

    - name: Generate cache key
      id: cache-key
      shell: bash
      run: |
        CACHE_KEY="${{ inputs.cache_prefix }}-${{ hashFiles('composer.json', 'composer.lock') }}"
        echo "cache-key=$CACHE_KEY" >> $GITHUB_OUTPUT
        echo "Generated cache key: $CACHE_KEY"

    - name: Restore vendor cache
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: vendor-cache.tar.zst
        key: ${{ steps.cache-key.outputs.cache-key }}

    - name: Extract vendor from cache
      if: steps.cache-restore.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo "Cache HIT, extracting vendor folder from cache..."
        rm -rf vendor
        if ! zstd -dc vendor-cache.tar.zst | tar -xpf -; then
          echo "Cache extraction failed, will run composer install"
          rm -rf vendor
        else
          echo "Successfully restored vendor from cache"
        fi

    - name: Composer install
      shell: bash
      run: |
        composer install ${{ inputs.composer_install_options }}

    - name: Create cache archive
      if: steps.cache-restore.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Creating vendor cache archive..."
        TEMP_TAR="vendor-cache.tmp.tar"
        
        # Create uncompressed tar first
        if ! tar -cpf "$TEMP_TAR" vendor; then
          echo "Failed to create tar archive"
          rm -f "$TEMP_TAR"
          exit 1
        fi
        
        # Compress with zstd
        if ! zstd -${{ inputs.zstd_compression_level }} -T0 -f --rm "$TEMP_TAR" -o vendor-cache.tar.zst; then
          echo "Failed to compress cache tarball"
          rm -f vendor-cache.tar.zst "$TEMP_TAR"
          exit 1
        fi
        
        # Validate the compressed file
        if ! zstd -t vendor-cache.tar.zst > /dev/null 2>&1; then
          echo "Cache tarball validation failed"
          rm -f vendor-cache.tar.zst
          exit 1
        fi
        
        echo "Successfully created vendor cache archive"

    - name: Save vendor cache
      if: steps.cache-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: vendor-cache.tar.zst
        key: ${{ steps.cache-key.outputs.cache-key }} 
